[ConnectorApi]
    # The address on which the events notifier listens for subscriptions
    # It can be specified as "localhost:5000" or only as "5000"
    Host = "5000"

    # Username and Password needed to authorize the connector
    # BasicAuth is enabled only for the endpoints with "Auth" flag enabled
    # in api.toml config file 
    Username = ""
    Password = ""

    # CheckDuplicates signals if the events received from observers have been already pushed to clients
    # Requires a redis instance/cluster and should be used when multiple observers push from the same shard
    CheckDuplicates = true

[Azure]
    KeyVault = "TrustMarketVault"
    Topic = 'mvx_events_raw'

[Redis]
    # The url used to connect to a pubsub server
    Url = "redis://localhost:6379/0"

    # The master name for failover client
    MasterName = "mymaster"

    # The sentinel url for failover client
    SentinelUrl = "localhost:26379"

    # The redis connection type. Options: | instance | sentinel |
    # instance - it will try to connect to a single redis instance
    # sentinel - it will try to connect to redis setup with master, slave and sentinel instances
    ConnectionType = "instance"

    # Time to live (in minutes) for redis lock entry
    TTL = 30

[RabbitMQ]
    # The url used to connect to a rabbitMQ server
    # Note: not required for running in the notifier mode
    Url = "amqp://guest:guest@localhost:5672"

    # The exchange which holds all logs and events
    [RabbitMQ.EventsExchange]
        Name = "all_events"
        Type = "fanout"

    # The exchange which holds revert events
    [RabbitMQ.RevertEventsExchange]
        Name = "revert_events"
        Type = "fanout"

    # The exchange which holds finalized block events
    [RabbitMQ.FinalizedEventsExchange]
        Name = "finalized_events"
        Type = "fanout"

    # The exchange which holds block txs events
    [RabbitMQ.BlockTxsExchange]
        Name = "block_txs"
        Type = "fanout"

    # The exchange which holds block scrs events
    [RabbitMQ.BlockScrsExchange]
        Name = "block_scrs"
        Type = "fanout"

    # The exchange which holds block events with additional info
    [RabbitMQ.BlockEventsExchange]
        Name = "block_events"
        Type = "fanout"
